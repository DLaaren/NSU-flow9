import lingo/pegcode/driver;
import string;
import math/math;

export {

    Expression ::= Var, Rational, BinOp, Neg;

    Var(var : string);
    Rational(l: int, r : int);
    BinOp(OpName : string, l : Expression, r : Expression);
    Neg(e: Expression);

    InfixToString(expr: Expression) -> string;
    //calculate(expr: Expression, VarsTree: Tree<string, double>) -> Maybe<double>;
    // simplify(expr: Expression) -> Expression;
}

InfixToString(expr: Expression) -> string {
    switch(expr) {
        Var(var) : var;
        Rational(l,r) : {
            if (r == 1) {
                i2s(l);
            } else {
                i2s(l) + "/" + i2s(r);
            }
        }
        BinOp(OpName, l, r) : "(" + InfixToString(l) + " " + OpName + " " + InfixToString(r) +")"
        Neg(e) : "(" + "-" + InfixToString(e) + ")";
    }
}

/*
calculate(expr: Expression, VarsTree: Tree<string, double>) -> Maybe<double> {

    getValue = \l,r, operator -> {
        switch(calculate(l, VarsTree)) {
            Some(left) : switch(calculate(r, VarsTree)) {
                Some(right) : operator(left, right);
                None() : None();
            };
            None() : None();
        }
    }

    add = \l,r -> {
        Some(Rational(0,0));
    }
    sub = \l,r -> {
        Some(Rational(0,0));
    }
    mult = \l,r -> {
        Some(Rational(0,0));
        //Some(Pair(firstOfPair(l) * firstOfPair(r), secondOfPair(l) * secondOfPair(r)));
    }
    div = \l,r -> {
        Some(Rational(0,0));
        //Some(Pair(firstOfPair(l) * secondOfPair(r), firstOfPair(r) * secondOfPair(l)));
    }

    switch(expr) {
        BinOp(OpName, l, r) : {
            if (OpName == "+") {
                getValue(l,r, \left, right -> add(left, right));
            }
            else if (OpName == "-") {
                getValue(l,r, \left, right -> sub(left, right));
            }
            else if (OpName == "*") {
                getValue(l,r, \left, right -> mult(left, right));
            }
            else if (OpName == "/") {
                getValue(l,r, \left, right -> div(left, right));
            } else {
                None();
            }
        }
        Neg(e) : switch(calculate(e, VarsTree)) {
            Some(value) : Some(-value);
            None() : None();
        }
        
        Var(var) : switch(lookupTree(VarsTree, var)) {
            Some(num) : Some(num);
            None() : None();
        }

        Rational(l,r) : Rational(l,r);

    }
}*/

/* simplify(expr: Expression) -> Expression {

} */
