import lingo/pegcode/driver;
import string;
import math/math;

export {

    Expression ::= Var, Rational, BinOp, Neg, Diff;

    Var(var : string);
    Rational(l: int, r : int);
    BinOp(OpName : string, l : Expression, r : Expression);
    Neg(e: Expression);
    Diff(e : Expression, x : Var);

    InfixToString(expr: Expression) -> string;
    calculate(expr: Expression, VarsTree: Tree<string, Rational>) -> Maybe<Rational>;
    calculateWrapper(expr: Expression, VarsTree: Tree<string, Rational>) -> Pair<string, Maybe<Rational>>;
}

InfixToString(expr: Expression) -> string {
    switch(expr) {
        Var(var) : var;
        Rational(l,r) : {
            if (r == 1) {
                i2s(l);
            } 
            else if (l == 0) {
                i2s(0);
            } else {
                i2s(l) + "/" + i2s(r);
            }
        }
        BinOp(OpName, l, r) : "(" + InfixToString(l) + " " + OpName + " " + InfixToString(r) +")"
        Neg(e) : "(" + "-" + InfixToString(e) + ")";
        Diff(e, x) : "(" + "d/d" + InfixToString(x) + " " + InfixToString(e) + ")";
    }
}

calculate(expr: Expression, VarsTree: Tree<string, Rational>) -> Maybe<Rational> {
    getValue = \l,r, operator -> {
        switch(calculate(l, VarsTree)) {
            Some(left) : switch(calculate(r, VarsTree)) {
                Some(right) : operator(left, right);
                None() : None();
            };
            None() : None();
        }
    }

    add = \left, right -> {
        if (left.r == right.r) {
            calculate(Rational(left.l + right.l, left.r), VarsTree);
        } else {
            calculate(Rational(left.l * right.r + right.l * left.r, left.r * right.r), VarsTree);
        }
    }
    sub = \left, right -> {
        if (left.r == right.r) {
            calculate(Rational(left.l - right.l, left.r), VarsTree);
        } else {
            calculate(Rational(left.l * right.r - right.l * left.r, left.r * right.r), VarsTree);
        }
    }
    mult = \left, right -> {
        calculate(Rational(left.l * right.l, left.r * right.r), VarsTree);
    }
    div = \left, right -> {
        calculate(Rational(left.l * right.r, left.r * right.l), VarsTree);
    }

    switch(expr) {
        Var(var) : switch(lookupTree(VarsTree, var)) {
            Some(num) : {
                if (num != Rational(0,0)) {
                    Some(num);
                } else {
                    None();
                }
            }
            None() : None();
        }

        Rational(l, r) : {
            if (l == 0) {
                Some(Rational(0,1));
            }
            else if (l == r) {
                Some(Rational(1,1));
            } else {
                Some(Rational(l,r));
            }
        }

        BinOp(OpName, l, r) : {
            if (OpName == "+") {
                getValue(l,r, \left, right -> add(left, right));
            }
            else if (OpName == "-") {
                getValue(l,r, \left, right -> sub(left, right));
            }
            else if (OpName == "*") {
                getValue(l,r, \left, right -> mult(left, right));
            }
            else if (OpName == "/") {
                getValue(l,r, \left, right -> div(left, right));
            } else {
                None();
            }
        }

        Neg(e) : switch(calculate(e, VarsTree)) {
            Some(value) : {
                left = value.l;
                right = value.r;
                Some(Rational(-left, right));
            }
            None() : None();
        }
 
        Diff(e,x) : switch(lookupTree(VarsTree, x.var)) {
            Some(value) : {
                if (value != Rational(0,0)) {
                    calculate(derivation(e,x), VarsTree);
                }
                else {
                    None();
                }
            }
            None() : None();
        }
    }
}

streamline(expr: Expression) -> Expression {
    switch(expr) {
        Var(var) : expr;

        Rational(l, r) : {
            if (l == 0) {
                Rational(0,1);
            }
            else if (l == r) {
                Rational(1,1);
            } else {
                expr;
            }
        }

        BinOp(OpName, l, r) : {
            if (OpName == "+") {
                switch(l) {
                    Var(vl) : switch(r) {
                        Var(v) : BinOp("+", l, r);
                        Rational(left,right) : BinOp("+", l, r);
                        default : BinOp("+", l, streamline(r));
                    }
                    
                    Rational(leftL,rightL) : switch(r) {
                        Var(v1) : BinOp("+", l, r);
                        Rational(leftR,rightR) : {
                            if (rightL == rightR) {
                                Rational(leftL + rightL, rightL);
                            } else {
                                Rational(leftL * rightR + rightL * leftR, rightL * rightR);
                            }
                        }
                        default : BinOp("+", l, streamline(r));
                    }

                    default : switch(r) {
                        Var(v) : BinOp("+", streamline(l), r);
                        Rational(left, right) : BinOp("+", streamline(l), r);
                        default : BinOp("+", streamline(l), streamline(r));
                    }
                }
            }

            else if (OpName == "-") {
                switch(l) {
                    Var(vl) : switch(r) {
                        Var(v) : BinOp("-", l, r);
                        Rational(left,right) : BinOp("-", l, r);
                        default : BinOp("-", l, streamline(r));
                    }
                    
                    Rational(leftL,rightL) : switch(r) {
                        Var(v1) : BinOp("-", l, r);
                        Rational(leftR,rightR) : {
                            if (rightL == rightR) {
                                Rational(leftL - rightL, rightL);
                            } else {
                                Rational(leftL * rightR - rightL * leftR, rightL * rightR);
                            }
                        }
                        default : BinOp("-", l, streamline(r));
                    }

                    default : switch(r) {
                        Var(v) : BinOp("-", streamline(l), r);
                        Rational(left, right) : BinOp("-", streamline(l), r);
                        default : BinOp("-", streamline(l), streamline(r));
                    }
                }
            }

            else if (OpName == "*") {
                switch(l) {
                    Var(vl) : switch(r) {
                        Var(v) : BinOp("*", l, r);
                        Rational(left,right) : BinOp("*", l, r);
                        default : BinOp("*", l, streamline(r));
                    }
                    
                    Rational(leftL,rightL) : switch(r) {
                        Var(v1) : BinOp("*", l, r);
                        Rational(leftR,rightR) : Rational(leftL * leftR, rightL * rightR);
                        default : BinOp("*", l, streamline(r));
                    }

                    default : switch(r) {
                        Var(v) : BinOp("*", streamline(l), r);
                        Rational(left, right) : BinOp("*", streamline(l), r);
                        default : BinOp("*", streamline(l), streamline(r));
                    }
                }
            }

            //else if (OpName == "/") {
            //    getValue(l,r, \left, right -> div(left, right));
            //}

            else {
                Rational(0,0);
            }
        }

        default : Rational(0,0);
    }
}


calculateWrapper(expr: Expression, VarsTree: Tree<string, Rational>) -> Pair<string, Maybe<Rational>> {
    result = streamline(simplify(expr));

    switch(calculate(result, VarsTree)) {
        Some(res) : Pair(InfixToString(result), Some(res));
        None() : Pair(InfixToString(result), None());
    }
}

simplify(expr: Expression) -> Expression {
    simplifiedExpression = switch(expr) {
        BinOp(name, l, r) : {
            if (name == "+") {
                simplifiedLeft = simplify(l);
                simplifiedRight = simplify(r);
                if (simplifiedLeft == Rational(0,1)) {
                    simplifiedRight;
                }
                else if (simplifiedRight == Rational(0,1)) {
                    simplifiedLeft;
                } else {
                    expr;
                }
            }
            else if (name == "*") {
                simplifiedLeft = simplify(l);
                simplifiedRight = simplify(r);
                if (simplifiedLeft == Rational(0,1)) {
                    Rational(0,1);
                }
                else if (simplifiedRight == Rational(0,1)) {
                    Rational(0,1);
                }
                else if (simplifiedLeft == Rational(1,1)) {
                    simplifiedRight;
                }
                else if (simplifiedRight == Rational(1,1)) {
                    simplifiedLeft;
                } else {
                    expr;
                }
            } 
            else if (name == "/") {
                simplifiedLeft = simplify(l);
                simplifiedRight = simplify(r);
                if (simplifiedLeft == Rational(0,1)) {
                    Rational(0,1);
                }
                else if (simplifiedRight == Rational(0,1)) {
                    Rational(0,1);
                } else {
                    expr;
                }
            } else {
                expr;
            }
        }
        default : expr;
    }
    if (simplifiedExpression == expr) {
        simplifiedExpression;
    } else {
        simplify(simplifiedExpression);
    }
}

derivation(expr : Expression, x : Var) -> Expression {
    switch(expr) {
        BinOp(name, l, r) : {
            if (name == "+") {
                BinOp("+", derivation(l,x), derivation(r,x));
            }
            else if (name == "-") {
                BinOp("-", derivation(l,x), derivation(r,x));
            }
            else if (name == "*") {
                BinOp("+", BinOp("*", derivation(l,x), r), BinOp("*", derivation(r,x), l));
            }
            else if (name == "/") {
                BinOp("/", BinOp("-", BinOp("*", derivation(l,x), r), BinOp("*", derivation(r,x), l)), BinOp("*", r, r));
            } else {
                
                Rational(0,1);
            }
        }   
        default : {
            if (expr == x) {
				Rational(1,1);
			} else {
				Rational(0,1);
			}
        }
    }
}
