import lingo/pegcode/driver;
import string;
import math/math;

export {

    Expression ::= Var, Const, Add, Sub, Mult, Div, Pow, /*Dif,*/ Log, Neg, Null;

    Var(var : string);
    Const(const : double);
    Add(l : Expression, r : Expression);
    Sub(l : Expression, r : Expression);
    Mult(l : Expression, r : Expression);
    Div(l : Expression, r : Expression);
    Pow(l : Expression, r : Expression);
    //Dif(l : Expression, r : Expression);
    Log(e : Expression);
    Neg(e: Expression);
    Null();

    InfixToString(expr: Expression) -> string;
    calculate(expr: Expression, VarsTree: Tree<string, double>) -> double;
    // simplify(expr: Expression) -> Expression;
}

InfixToString(expr: Expression) -> string {
    switch(expr) {
        Var(var) : var;
        Const(const) : d2s(const);
        Add(l, r) : "(" + InfixToString(l) + "+" + InfixToString(r) + ")";
        Sub(l, r) : "(" + InfixToString(l) + "-" + InfixToString(r) + ")";
        Mult(l, r) : "(" + InfixToString(l) + "*" + InfixToString(r) + ")";
        Div(l, r) : "(" + InfixToString(l) + "/" + InfixToString(r) + ")";
        Pow(l, r) : "(" + InfixToString(l) + "^" + InfixToString(r) + ")";
        // dif
        Log(e) : "(" + "log" + InfixToString(e) + ")";
        Neg(e) : "(" + "-" + InfixToString(e) + ")";
        Null() : "Null";
    }
}

calculate(expr: Expression, VarsTree: Tree<string, double>) -> double {
    switch(expr) {
        Add(l ,r) : calculate(l, VarsTree) + calculate(r, VarsTree);
        Sub(l, r) : calculate(l, VarsTree) - calculate(r, VarsTree);
        Mult(l, r) : calculate(l, VarsTree) * calculate(r, VarsTree);
        Div(l, r) : calculate(l, VarsTree) / calculate(r, VarsTree);
        Pow(l, r) : dpow(calculate(l, VarsTree), calculate(r, VarsTree));

        //dif
        Log(e) : log(calculate(e, VarsTree));
        Neg(e) : -calculate(e, VarsTree);

        Var(var) : switch(lookupTree(VarsTree, var)) {
            Some(num) : num;
            None() : 0.0;
        }
        Const(const) : const; 
        Null() : 0.0;
    }
}

/* simplify(expr: Expression) -> Expression {

} */
