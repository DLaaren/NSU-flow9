import lingo/pegcode/driver;
import string;
import math/math;

export {

    Expression ::= Var, Const, Add, Sub, Mult, Div, Pow, /*Dif,*/ Log, Neg;

    Var(var : string);
    Const(const : double);
    Add(l : Expression, r : Expression);
    Sub(l : Expression, r : Expression);
    Mult(l : Expression, r : Expression);
    Div(l : Expression, r : Expression);
    Pow(l : Expression, r : Expression);
    //Dif(l : Expression, r : Expression);
    Log(e : Expression);
    Neg(e: Expression);

    InfixToString(expr: Expression) -> string;
    calculate(expr: Expression, VarsTree: Tree<string, double>) -> Maybe<double>;
    // simplify(expr: Expression) -> Expression;
}

InfixToString(expr: Expression) -> string {
    switch(expr) {
        Var(var) : var;
        Const(const) : d2s(const);
        Add(l, r) : "(" + InfixToString(l) + "+" + InfixToString(r) + ")";
        Sub(l, r) : "(" + InfixToString(l) + "-" + InfixToString(r) + ")";
        Mult(l, r) : "(" + InfixToString(l) + "*" + InfixToString(r) + ")";
        Div(l, r) : "(" + InfixToString(l) + "/" + InfixToString(r) + ")";
        Pow(l, r) : "(" + InfixToString(l) + "^" + InfixToString(r) + ")";
        // dif
        Log(e) : "(" + "log" + InfixToString(e) + ")";
        Neg(e) : "(" + "-" + InfixToString(e) + ")";
    }
}

calculate(expr: Expression, VarsTree: Tree<string, double>) -> Maybe<double> {

    getValue = \l,r, operator -> {
        switch(calculate(l, VarsTree)) {
            Some(left) : switch(calculate(r, VarsTree)) {
                Some(right) : operator(left, right);
                None() : None();
            };
            None() : None();
        }
    }

    switch(expr) {
        Add(l ,r) : getValue(l,r, \left, right -> Some(left + right));
        Sub(l, r) : getValue(l,r, \left, right -> Some(left - right));
        Mult(l, r) : getValue(l,r, \left, right -> Some(left * right));
        Div(l, r) : getValue(l,r, \left, right -> Some(left / right));
        Pow(l, r) : getValue(l,r, \left, right -> Some(dpow(left, right)));
        //dif
        Log(e) : switch(calculate(e, VarsTree)) {
            Some(value) : Some(log(value));
            None() : None();
        }
        Neg(e) : switch(calculate(e, VarsTree)) {
            Some(value) : Some(-value);
            None() : None();
        }

        Var(var) : switch(lookupTree(VarsTree, var)) {
            Some(num) : Some(num);
            None() : None();
         }
        Const(const) : Some(const); 
    }
}

/* simplify(expr: Expression) -> Expression {

} */
