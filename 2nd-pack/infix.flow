import lingo/pegcode/driver;
import string;
import math/math;
import ds/egraph;
import ds/egraph_matching;
import ds/egraph_dot;
import ds/egraph_extract;

export {

    Expression ::= Var, Rational, BinOp, Neg, Diff;

    Var(var : string);
    Rational(l: int, r : int);
    Error = Rational(0,0);
    RationalOne = Rational(1,1);
    RationalZero = Rational(0,1);
    BinOp(OpName : string, l : Expression, r : Expression);
    Neg(e: Expression);
    Diff(e : Expression, x : Var);
    Polynom(num : Expression, denom : Expression);
    PolynomError = Polynom(Error, Error);

    parse(source : string) -> Expression;
    inputVariablesIntoTree() -> Tree<string, Rational>;
    InfixToString(expr: Expression) -> string;
    calculate(expr: Expression, VarsTree: Tree<string, Rational>) -> Maybe<Rational>;
    calculateWrapper(expr: Expression, VarsTree: Tree<string, Rational>) -> Pair<string, Maybe<Rational>>;
}

buildOp(xs : [flow]) {
	fold(xs[2], xs[1], \acc, x -> BinOp(xs[0], acc, x));
}

lingoGrammar() {
    compilePegGrammar("#include infix.lingo");
}

parse(source: string) -> Expression {
	specialPegActions = {
		t1 = setTree(defaultPegActions.t, "buildOp", buildOp);
		SemanticActions(t1);
	}
	parsic(lingoGrammar(), source, specialPegActions);
}

inputVariablesIntoTree() -> Tree<string, Rational> {
    variables = strSplit(getUrlParameter("vars"), ",");
    fold(variables, makeTree(),\ tree, variable -> {
        if (strContains(getUrlParameter(variable), "/")) {
            nums = strSplit(getUrlParameter(variable), "/");
            a = s2i(nums[0]);
            b = s2i(nums[1]);
            setTree(tree, variable, Rational(a,b));
        } else if (getUrlParameter(variable) != "") {
            a = s2i(getUrlParameter(variable));
            setTree(tree, variable, Rational(a,1));
        } else {
            setTree(tree, variable, Error);
        }
    });
}


InfixToString(expr: Expression) -> string {
    switch(expr) {
        Var(var) : var;
        Rational(l,r) : {
            if (r == 1) {
                i2s(l);
            } 
            else if (l == 0) {
                i2s(0);
            } else {
                i2s(l) + "/" + i2s(r);
            }
        }
        BinOp(OpName, l, r) : "(" + InfixToString(l) + " " + OpName + " " + InfixToString(r) +")"
        Neg(e) : "(" + "-" + InfixToString(e) + ")";
        Diff(e, x) : "(" + "d/d" + InfixToString(x) + " " + InfixToString(e) + ")";
    }
}

calculate(expr: Expression, VarsTree: Tree<string, Rational>) -> Maybe<Rational> {
    getValue = \l,r, operator -> {
        switch(calculate(l, VarsTree)) {
            Some(left) : switch(calculate(r, VarsTree)) {
                Some(right) : operator(left, right);
                None() : None();
            };
            None() : None();
        }
    }

    add = \left, right -> {
        if (left.r == right.r) {
            calculate(Rational(left.l + right.l, left.r), VarsTree);
        } else {
            calculate(Rational(left.l * right.r + right.l * left.r, left.r * right.r), VarsTree);
        }
    }
    sub = \left, right -> {
        if (left.r == right.r) {
            calculate(Rational(left.l - right.l, left.r), VarsTree);
        } else {
            calculate(Rational(left.l * right.r - right.l * left.r, left.r * right.r), VarsTree);
        }
    }
    mult = \left, right -> {
        calculate(Rational(left.l * right.l, left.r * right.r), VarsTree);
    }
    div = \left, right -> {
        calculate(Rational(left.l * right.r, left.r * right.l), VarsTree);
    }

    switch(expr) {
        Var(var) : switch(lookupTree(VarsTree, var)) {
            Some(num) : {
                if (num != Error) {
                    Some(num);
                } else {
                    None();
                }
            }
            None() : None();
        }

        Rational(l, r) : {
            Some(Rational(l,r));
        }

        BinOp(OpName, l, r) : {
            if (OpName == "+") {
                getValue(l,r, \left, right -> add(left, right));
            }
            else if (OpName == "-") {
                getValue(l,r, \left, right -> sub(left, right));
            }
            else if (OpName == "*") {
                getValue(l,r, \left, right -> mult(left, right));
            }
            else if (OpName == "/") {
                getValue(l,r, \left, right -> div(left, right));
            } else {
                None();
            }
        }

        Neg(e) : switch(calculate(e, VarsTree)) {
            Some(value) : {
                left = value.l;
                right = value.r;
                Some(Rational(-left, right));
            }
            None() : None();
        }
 
        Diff(e,x) : switch(lookupTree(VarsTree, x.var)) {
            Some(value) : {
                if (value != Error) {
                    calculate(derivation(e,x), VarsTree);
                }
                else {
                    None();
                }
            }
            None() : None();
        }
    }
}

normalization(result : Maybe<Rational>) -> Maybe<Rational> {
    switch(result) {
        Some(res) : {
            if (res.r == 0) {
                None();
            }
            else if (res.l == 0 && res.r == 1) {
                Some(RationalZero);
            }
            else if (res.l == res.r) {
                Some(RationalOne);
            }
            else {
                gcd = gcd(res.l, res.r);
                if (gcd < 0) {
                    Some(Rational(res.l / (-gcd), res.r / (-gcd)));
                }
                else {
                    Some(Rational(res.l / gcd, res.r / gcd));
                }
            }
        }
        None() : None();
    }
}

calculateWrapper(expr: Expression, VarsTree: Tree<string, Rational>) -> Pair<string, Maybe<Rational>> {
    result = removeRedundant(simplify(removeRedundant(convertExpressionToPolynom(expr))));
    
    calcRes = switch(result) {
        BinOp(OpName, l, r) : {
            if (OpName == "/") {
                calcL = calculate(l, VarsTree);
                calcR = calculate(r, VarsTree);
                if (!isNone(calcL) && !isNone(calcR)) {
                    BinOp("/", either(calcL,Error), either(calcR, Error));
                }
                else if (!isNone(calcL)) {
                    BinOp("/", either(calcL,Error), r);
                }
                else if (!isNone(calcR)) {
                    BinOp("/", l, either(calcR, Error));
                }
                else {
                    result;
                }
            } else {
                result;
            }
        }
        default : result;
    }

    switch(normalization(calculate(calcRes, VarsTree))) {
        Some(res) : Pair(InfixToString(calcRes), Some(res));
        None() : Pair(InfixToString(calcRes), None());
    }
}

derivation(expr : Expression, x : Var) -> Expression {
    switch(expr) {
        BinOp(name, l, r) : {
            if (name == "+") {
                BinOp("+", derivation(l,x), derivation(r,x));
            }
            else if (name == "-") {
                BinOp("-", derivation(l,x), derivation(r,x));
            }
            else if (name == "*") {
                BinOp("+", BinOp("*", derivation(l,x), r), BinOp("*", derivation(r,x), l));
            }
            else if (name == "/") {
                switch(l) {
                    Rational(left, right) : {
                        if (r == x) {
                            BinOp("*", l, Var("ln " + x.var));
                        } 
                        else {
                            BinOp("/", BinOp("-", BinOp("*", derivation(l,x), r), BinOp("*", derivation(r,x), l)), BinOp("*", r, r));
                        }
                    }
                    default : BinOp("/", BinOp("-", BinOp("*", derivation(l,x), r), BinOp("*", derivation(r,x), l)), BinOp("*", r, r));
                }
            } else {
                RationalZero;
            }
        }   
        default : {
            if (expr == x) {
				RationalOne;
			} else {
				RationalZero;
			}
        }
    }
}

removeRedundant(expr : Expression) -> Expression {
    simplifiedExpression = switch(expr) {
        Neg(n1) : {
            switch(n1) {
                Neg(n2) : removeRedundant(n2);
                default : Neg(removeRedundant(n1));
            }
        }
        BinOp(name, l, r) : {
            simplifiedLeft = removeRedundant(l);
            simplifiedRight = removeRedundant(r);
            if (name == "+") {
                if (simplifiedLeft == RationalZero) {
                    simplifiedRight;
                }
                else if (simplifiedRight == RationalZero) {
                    simplifiedLeft;
                } else {
                    BinOp("+", simplifiedLeft, simplifiedRight);
                }
            }
            else if (name == "-") {
                if (simplifiedLeft == RationalZero) {
                    Neg(simplifiedRight);
                }
                else if (simplifiedRight == RationalZero) {
                    simplifiedLeft;
                } else {
                    BinOp("-", simplifiedLeft, simplifiedRight);
                }
            }
            else if (name == "*") {
                if (simplifiedLeft == RationalZero) {
                    RationalZero;
                }
                else if (simplifiedRight == RationalZero) {
                    RationalZero;
                }
                else if (simplifiedLeft == RationalOne) {
                    simplifiedRight;
                }
                else if (simplifiedRight == RationalOne) {
                    simplifiedLeft;
                }
                else if (simplifiedLeft == Neg(RationalOne)) {
                    Neg(simplifiedRight);
                }
                else if (simplifiedRight == Neg(RationalOne)) {
                    Neg(simplifiedLeft);
                } else {
                    BinOp("*", simplifiedLeft, simplifiedRight);
                }
            } 
            else if (name == "/") {
                if (simplifiedLeft == RationalZero) {
                    RationalZero;
                }
                else if (simplifiedRight == RationalOne) {
                    simplifiedLeft;
                } else {
                    BinOp("/", simplifiedLeft, simplifiedRight);
                }
            } else {
                BinOp(name, removeRedundant(l), removeRedundant(r));
            }
        }
        default : expr;
    }
    if (simplifiedExpression == expr) {
        simplifiedExpression;
    } else {
        removeRedundant(simplifiedExpression);
    }
}


convertExpressionToPolynom(expr : Expression) -> Expression {
    switch(expr) {
        BinOp(OpName, left, right) : {
            if (OpName == "/") {
                convertPolynomToExpression(calculatePolynom(Polynom(left, right)));
            }
            else {
                convertPolynomToExpression(calculatePolynom(Polynom(expr, RationalOne)));
            }
        }
        default : convertPolynomToExpression(calculatePolynom(Polynom(expr, RationalOne)));
    }
}

convertPolynomToExpression(polynom : Polynom) -> Expression {
    num = polynom.num;
    denom = polynom.denom;
    switch (denom) {
        Rational(left, right) : {
            if (left == 1 && right == 1) {
                num;
            }
            else {
                BinOp("/", num, denom);
            }
        }
        default : BinOp("/", num, denom);
    }
}

calculatePolynom(polynom : Polynom) -> Polynom {

    addPolynoms = \l,r -> {
        Polynom(BinOp("+", BinOp("*", l.num, r.denom), BinOp("*", r.num, l.denom)), BinOp("*", l.denom, r.denom));
    }

    subPolynoms = \l,r -> {
        Polynom(BinOp("-", BinOp("*", l.num, r.denom), BinOp("*", r.num, l.denom)), BinOp("*", l.denom, r.denom));
    }

    multPolynoms = \l,r -> {
        Polynom(BinOp("*", l.num, r.num), BinOp("*", l.denom, r.denom));
    }

    divPolynoms = \l,r -> {
        Polynom(BinOp("*", l.num, r.denom), BinOp("*", l.denom, r.num));
    }

    num = polynom.num;
    denom = polynom.denom;

    resultNum = switch(num) {

        Rational(left, right) : Polynom(Rational(left, 1), Rational(right, 1));
        Var(v) : Polynom(Var(v), RationalOne);

        BinOp(OpName, left, right) : {
            leftPolynom = calculatePolynom(Polynom(left, RationalOne));
            rightPolynom = calculatePolynom(Polynom(right, RationalOne));
            if (OpName == "+") {
                addPolynoms(leftPolynom, rightPolynom);
            }
            else if (OpName == "-") {
                subPolynoms(leftPolynom, rightPolynom);
            }
            else if (OpName == "*") {
                multPolynoms(leftPolynom, rightPolynom);
            }
            else if (OpName == "/") {
                divPolynoms(leftPolynom, rightPolynom);
            }
            else {
                PolynomError;
            }

        }

        Neg(e) : Polynom(Neg(convertPolynomToExpression(calculatePolynom(Polynom(e,RationalOne)))), RationalOne);
        Diff(e,x) : Polynom(Diff(convertPolynomToExpression(calculatePolynom(Polynom(e, RationalOne))),x), RationalOne);

    }

    resultDenom = switch(denom) {

        Rational(left, right) : Polynom(Rational(left, 1), Rational(right, 1));
        Var(v) : Polynom(Var(v), RationalOne);

        BinOp(OpName, left, right) : {
            leftPolynom = calculatePolynom(Polynom(left, RationalOne));
            rightPolynom = calculatePolynom(Polynom(right, RationalOne));
            
            if (OpName == "+") {
                addPolynoms(leftPolynom, rightPolynom);
            }
            else if (OpName == "-") {
                subPolynoms(leftPolynom, rightPolynom);
            }
            else if (OpName == "*") {
                multPolynoms(leftPolynom, rightPolynom);
            }
            else if (OpName == "/") {
                divPolynoms(leftPolynom, rightPolynom);
            }
            else {
                PolynomError;
            }

        }

        Neg(e) : Polynom(Neg(convertPolynomToExpression(calculatePolynom(Polynom(e,RationalOne)))), RationalOne);
        Diff(e,x) : Polynom(Diff(convertPolynomToExpression(calculatePolynom(Polynom(e, RationalOne))),x), RationalOne);

    }

    divPolynoms(resultNum, resultDenom);
}



tryCalculate(e) -> Maybe<Rational> {
    switch(normalization(calculate(e, makeTree()))) {
        Some(res) : Some(res);
        None() : None();
    }
}


simplify(exp: Expression) -> Expression {

    splitChildren = \e -> {
        switch(e) {
            Rational(l,r): {
                children = [];
                Pair(Rational(l,r), children);
            }
            Var(v): {
                child = [];
                Pair(Var(v), child);
            }
            BinOp(OpName, l, r) : {
                children = [l, r];
                Pair(Var(OpName), children);
            }
            Neg(n): {
                children = [n];
                Pair(Var("Neg"), children);
            }
            Diff(n,x): {
                children = [n, x];
                Pair(Var("Diff"), children);
            }
        }
    }

    // https://github.com/area9innovation/flow9/blob/master/lib/ds/egraph_matching.flow

    // Given some expression type, and a way to split the children
	// out of a (recursive) expression, build an egraph.
	// The split function should convert `op([1,2])` to the (child-less) parent &
	// the children as in `Pair(op([]), [1,2])`.
	// The clearing of the parent children is required for canonicality.
	// makeEGraph(splitChildren : (?) -> Pair<?, [?]>) -> EGraph<?>;

    graph : EGraph<Expression> = makeEGraph(splitChildren);    
    rootClass = addEExp(graph, exp);

    mycombine = \head, args -> {

        switch(head) {
            Rational(l,r) : Rational(l,r);
            Var(v) : {
                if (v == "+") {
                    BinOp("+", args[0], args[1]);
                }
                else if (v == "-") {
                    BinOp("-", args[0], args[1]);
                }
                else if (v == "*") {
                    BinOp("*", args[0], args[1]);
                }
                else if (v == "/") {
                    BinOp("/", args[0], args[1]);
                }
                else if (v == "Neg") {
                    Neg(args[0]);
                }/* idl but it does not working with diff
                else if (v == "Diff") {
                    Diff(args[0], args[1]);
                }*/
                else {
                    Var(v);
                }
            }
            default : Error;
        }
    }


    // Prepare a matching engine to be used with a given EGraph
	//  makeEMatchEngine(e : EGraph<?>, def : ?, 
	//	  // How to construct a value, from a head and recursive arguments
	//	  combine : (head : ?, args : [?]) -> ?,
	//  ) -> EMatchEngine<?>;


    myEMatchEngine : EMatchEngine<Expression> = makeEMatchEngine(graph, exp, mycombine);

    // Performs all replacements possible, repeatedly up to the given number of iterations
	// performEReplacements(e : EMatchEngine<?>, iterations : int, class : int, 
	//  replacements : [EReplacement<?>]) -> void;

	//	EReplacement(
	//		// The pattern to look for
	//		pattern : EPattern<?>, 
	//		// Once we have a match, then construct a new value, and that
	//		// value will be unified with the original
	//		rewrite : (bindings : Tree<string, ?>) -> ?
	//	);

    // Find all matches to this pattern to a given class. Calls the onMatch function
	// for each. Traverses all down recursive
	// findAllEClassMatches(
	// 	    acc : EMatchEngine<?>, class : int, pattern : EPattern<?>, visited : Set<int>,
	//	    onMatch : (bindings : Tree<string, ?>, ?) -> void
	// ) -> Set<int>;


    // x + y -> y + x 
    pattern1 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("y")]);
    replacement1 = EReplacement(pattern1, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        res = tryCalculate(BinOp("+", y, x));
        switch(res) {
            Some(r) : r;
            None() : {
                if (x == y) {
                    BinOp("*", Rational(2,1), x);
                }
                else {
                    BinOp("+", y, x); 
                }
            }
        }
    });

    pattern = [replacement1];

    // x - x -> 0
    pattern2 : EPattern<Expression> = EPatternTerm(Var("-"), [EPatternVar("x"), EPatternVar("x")]);
    replacement2 = EReplacement(pattern2, \treeIdExpr -> {
        RationalZero;
    });

    // x / x -> 1
    pattern3 : EPattern<Expression> = EPatternTerm(Var("/"), [EPatternVar("x"), EPatternVar("x")]);
    replacement3 = EReplacement(pattern3, \treeIdExpr -> {
        RationalOne;
    });

    // (x - z) + (y + z) -> (x + y)
    pattern4 : EPattern<Expression> = EPatternTerm(Var("+"), 
                                                [EPatternTerm(Var("-"), [EPatternVar("x"), EPatternVar("z")]), 
                                                EPatternTerm(Var("+"), [EPatternVar("y"), EPatternVar("z")])]);
    replacement4 = EReplacement(pattern4, \treeIdExpr -> {
        BinOp("+", lookupTreeDef(treeIdExpr, "x", Error), lookupTreeDef(treeIdExpr, "y", Error));
    });

    // (x + z) + (y - z) -> (x + y)
    pattern5 : EPattern<Expression> = EPatternTerm(Var("+"), 
                                                [EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("z")]), 
                                                EPatternTerm(Var("-"), [EPatternVar("y"), EPatternVar("z")])]);
    replacement5 = EReplacement(pattern5, \treeIdExpr -> {
        BinOp("+", lookupTreeDef(treeIdExpr, "x", Error), lookupTreeDef(treeIdExpr, "y", Error));
    });

    // x*y -> y*x
    pattern6 : EPattern<Expression> = EPatternTerm(Var("+"), 
                                                [EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("z")]), 
                                                EPatternTerm(Var("-"), [EPatternVar("y"), EPatternVar("z")])]);
    replacement6 = EReplacement(pattern6, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        res = tryCalculate(BinOp("*", y, x));
        switch(res) {
            Some(r) : r;
            None() : BinOp("*", y, x); 
        }
    });

    // x + (-x)
    pattern7 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternVar("x"),
                                                EPatternTerm(Var("Neg"), [EPatternVar("x")])]);
    replacement7 = EReplacement(pattern7, \treeIdExpr -> {
        RationalZero;
    });
    
    // (x * z) + (y * z) -> (x + y) * z
    pattern8 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternTerm(Var("*"), [EPatternVar("x"),EPatternVar("z")]), 
                                                    EPatternTerm(Var("*"), [EPatternVar("y"),EPatternVar("z")])]);
    replacement8 = EReplacement(pattern8, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("*", BinOp("+", x, y), z);
    });

    // x + (y + z) ->  y + (z + x)
    pattern9 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternVar("x"), EPatternTerm(Var("+"), [EPatternVar("y"), EPatternVar("z")])]);
    replacement9 = EReplacement(pattern9, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("+", y, BinOp("+", z, x));
    });

    // (x + y) + z ->  (y + z) + x
    pattern10 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("y")]), EPatternVar("z")]);
    replacement10 = EReplacement(pattern10, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);

        BinOp("+", BinOp("+", y, z), x);
    });

    // (x * z) + (y * z) -> (x + y) * z
    pattern12 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternTerm(Var("*"), [EPatternVar("x"), EPatternVar("z")]),
                                                                EPatternTerm(Var("*"), [EPatternVar("y"), EPatternVar("z")])]);
    replacement12 = EReplacement(pattern12, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("*", BinOp("+", x, y), z);
    });

    // (x + y) * z -> (x * z + y * z)
    pattern11 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternTerm(Var("*"), [EPatternVar("x"), EPatternVar("z")]),
                                                                EPatternTerm(Var("*"), [EPatternVar("y"), EPatternVar("z")])]);
    replacement11 = EReplacement(pattern11, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("+", BinOp("*", x, z), BinOp("*", y, z));
    });

    // x + (x*y) -> x * (1  +  y)
    pattern13 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternVar("x"),
                                                                EPatternTerm(Var("*"), [EPatternVar("x"), EPatternVar("y")])]);
    replacement13 = EReplacement(pattern13, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("*", x, BinOp("+", RationalOne, y) );
    });

    // (x * y) + x -> (1  +  y) + x
    pattern21 : EPattern<Expression> = EPatternTerm(Var("+"), [EPatternVar("x"),
                                                                EPatternTerm(Var("*"), [EPatternVar("y"), EPatternVar("x")])]);
    replacement21 = EReplacement(pattern21, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("*", BinOp("+", RationalOne, y), x);
    });

    // (x + y) - y -> x + 0 
    pattern14 : EPattern<Expression> = EPatternTerm(Var("-"), [EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("y")]),
                                                                EPatternVar("y")]);
    replacement14 = EReplacement(pattern14, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        BinOp("+", x, BinOp("-", y, y));
    });

    // (x * y) * z -> x * (y*z)
    pattern15 : EPattern<Expression> = EPatternTerm(Var("*"), [EPatternTerm(Var("*"), [EPatternVar("x"), EPatternVar("y")]),
                                                                EPatternVar("z")]);
    replacement15 = EReplacement(pattern15, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("*", x, BinOp("*", y, z));
    });

    // z * (x * y) -> (z*x) * y
    pattern20 : EPattern<Expression> = EPatternTerm(Var("*"), [EPatternVar("z"), EPatternTerm(Var("*"), [EPatternVar("x"), EPatternVar("y")])]);
    replacement20 = EReplacement(pattern20, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        z = lookupTreeDef(treeIdExpr, "z", Error);
        BinOp("*", BinOp("*", z, x), y);
    });

    // x * x - y * y -> (x - y) * (x + y) 
    pattern16 : EPattern<Expression> = EPatternTerm(Var("-"), [EPatternTerm(Var("*"), [EPatternVar("x"), EPatternVar("x")]),
                                                                EPatternTerm(Var("*"), [EPatternVar("y"), EPatternVar("y")])]);
    replacement16 = EReplacement(pattern16, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        BinOp("*", BinOp("-", x, y), BinOp("+", x, y));
    });
    

    // (x - y) * (x + y) -> x*x - y*y 
    pattern17 : EPattern<Expression> = EPatternTerm(Var("*"), [EPatternTerm(Var("-"), [EPatternVar("x"), EPatternVar("y")]),
                                                                EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("y")])]);
    replacement17 = EReplacement(pattern17, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        BinOp("-", BinOp("*", x, x), BinOp("*", y, y));
    });
    

    // (x-y) * (x-y) -> (x*x + y*y) - (2 * (x*y)) 
    pattern18 : EPattern<Expression> = EPatternTerm(Var("*"), [EPatternTerm(Var("-"), [EPatternVar("x"), EPatternVar("y")]),
                                                                EPatternTerm(Var("-"), [EPatternVar("x"), EPatternVar("y")])]);
    replacement18 = EReplacement(pattern18, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        BinOp("-", BinOp("+", BinOp("*", x, x), BinOp("*", y, y)), BinOp("*", Rational(2,1), BinOp("*", x, y)));
    });

    // (x+y) * (x+y) -> (x*x + y*y) + (2 * (x*y)) 
    pattern19 : EPattern<Expression> = EPatternTerm(Var("*"), [EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("y")]),
                                                                EPatternTerm(Var("+"), [EPatternVar("x"), EPatternVar("y")])]);
    replacement19 = EReplacement(pattern19, \treeIdExpr -> {
        x = lookupTreeDef(treeIdExpr, "x", Error);
        y = lookupTreeDef(treeIdExpr, "y", Error);
        BinOp("+", BinOp("+", BinOp("*", x, x), BinOp("*", y, y)), BinOp("*", Rational(2,1), BinOp("*", x, y)));
    });

    patterns : [EReplacement<Expression>] = [replacement1, replacement2, replacement3, replacement4, replacement5, replacement6, replacement7, replacement8, replacement9, replacement10, replacement11, replacement12, replacement13, replacement14, replacement15, replacement17, replacement16, replacement18, replacement19, replacement20, replacement21];

    performEReplacements(myEMatchEngine, 15, rootClass, patterns);



    getCost = \c -> c.cost;

    defineNodeCost = \node, childrenCostArray -> {
        currNodeChildrenCost = map(childrenCostArray, \c -> getCost(c));
        childrenCost = fold(currNodeChildrenCost, 0, \x, y -> x + y);

        nodeCost = switch(node.head) {
            Rational(l,r) : 1;
            Var(v) : 5; 
            BinOp(OpName, l, r) : {
                if (l == r) {
                    1;
                }
                else if (OpName == "+") {
                    30;
                }
                else if (OpName == "-") {
                    30;
                }
                else if (OpName == "*") {
                    5;
                }
                else if (OpName == "/") {
                    30;
                }
                else {
                    //error
                    10000;
                }

            };
            Neg(n) : 1;
            Diff(n,x) : 1;
        }
        
        //println(InfixToString(node.head));
        //println(i2s(childrenCost) + i2s(nodeCost));
        //println("");

        nodeCost + childrenCost;
    }
    
    // Extracts the best enode for each class
    //	extractEGraph(e : EGraph<?>, 
    //		// Given a node, and the cost of the children, what is the cost of this node?
    //		costFn : (ENode<?>, [EClassCost<?>]) -> int
    //	) -> Tree<int, EClassCost<?>>;
    //
    //	EClassCost(
    //		// The cost of this. The smaller, the better
    //		cost : int,
    //		// The node that wins
    //		node : ENode<?>
    //	);


    bestSimplification = extractEGraph(graph, defineNodeCost);
    bestSimplificationNodes = mapTree(bestSimplification, \v -> (v.node));
    bestSimplificationCosts = mapTree(bestSimplification, \v -> (v.cost));
    treeValues = getTreeValues(bestSimplificationCosts);
    treeKeys = getTreeKeys(bestSimplification);

    rootIdx = findi(treeValues, \n -> {
        maxCost = maxA(treeValues);
        switch(maxCost) {
            Some(c) : {
                if (n == c) {
                    true;
                }
                else {
                    false;
                }
            }
            None() : false;
        }
    });

    newRootClass = switch (rootIdx) {
        Some(idx) : treeKeys[idx];
        None(): rootClass;
    }

    //println("rootClass " + i2s(rootClass));
    //println("newRootClass " + i2s(newRootClass));

    //printGraph(graph, bestSimplificationNodes);

    convertEGraphToExpression(graph, newRootClass, bestSimplificationNodes);
}    

convertEGraphToExpression(graph : EGraph<Expression>, rootClass : int, bestSimplification : Tree<int, ENode<Expression>>) -> Expression {

    isOp = \e -> {
        switch(e) {
            Var(v) : {
                if (v == "+") {
                    true;
                }
                else if (v == "-") {
                    true;
                }
                else if (v == "*") {
                    true;
                }
                else if (v == "/") {
                    true;
                }
                else if (v == "Neg") {
                    true;
                }
                else {
                    false;
                }
            }
            default : false;
        }
    }

    currNode = lookupTreeDef(bestSimplification, rootClass, ENode(Error, []));

    if (isOp(currNode.head)) {

        switch(currNode.head) {
            Var(v) : {
                if (v == "Neg") {
                    if (length(currNode.args) == 1) {
                        childClass = currNode.args[0];
                        child = convertEGraphToExpression(graph, childClass, bestSimplification);
                        Neg(child);
                    }
                    else {
                        Error;
                    }
                }
                else {
                    //println("children :: " + i2s(length(currNode.args)));
                    if (length(currNode.args) == 2) {
                        leftChildClass = currNode.args[0];
                        leftChild = convertEGraphToExpression(graph, leftChildClass,bestSimplification);
                        //println("left = " + InfixToString(leftChild));

                        rightChildClass = currNode.args[1];
                        rightChild = convertEGraphToExpression(graph, rightChildClass,bestSimplification);
                        //println("right = " + InfixToString(rightChild));

                        if (v == "+") {
                            BinOp("+", leftChild, rightChild);
                        }
                        else if (v == "-") {
                            BinOp("-", leftChild, rightChild);
                        }
                        else if (v == "*") {
                            BinOp("*", leftChild, rightChild);
                        }
                        else if (v == "/") {
                            BinOp("/", leftChild, rightChild);
                        }
                        else {
                            Error;
                        }
                    }
                    else {
                        Error;
                    }
                }
            }
            default: Error;
        }
    }
    else {
        currNode.head;
    }
    
    //Var("aboba");
}

printGraph(graph : EGraph<Expression>, bestSimplification : Tree<int, ENode<Expression>> ) -> void {

    isOp = \e -> {
        switch(e) {
            Var(v) : {
                if (v == "+") {
                    true;
                }
                else if (v == "-") {
                    true;
                }
                else if (v == "*") {
                    true;
                }
                else if (v == "/") {
                    true;
                }
                else if (v == "Neg") {
                    true;
                }
                else {
                    false;
                }
            }
            default : false;
        }
    }

    label = \currNode -> {
        if (isOp(currNode.head)) {

            switch(currNode.head) {
                Var(v) : {
                    if (v == "Neg") {
                        childClass = currNode.args[0];
                        child = convertEGraphToExpression(graph, childClass, bestSimplification);
                        InfixToString(Neg(child));
                    }
                    else {
                        leftChildClass = currNode.args[0];
                        leftChild = convertEGraphToExpression(graph, leftChildClass, bestSimplification);

                        rightChildClass = currNode.args[1];
                        rightChild = convertEGraphToExpression(graph, rightChildClass, bestSimplification);

                        if (v == "+") {
                            InfixToString(BinOp("+", leftChild, rightChild));
                        }
                        else if (v == "-") {
                            InfixToString(BinOp("-", leftChild, rightChild));
                        }
                        else if (v == "*") {
                            InfixToString(BinOp("*", leftChild, rightChild));
                        }
                        else if (v == "/") {
                            InfixToString(BinOp("/", leftChild, rightChild));
                        }
                        else {
                            InfixToString(Error);
                        }
                    }
                }
                default: InfixToString(Error);
            }
        }
        else {
            InfixToString(currNode.head);
        }
    };

    println(egraph2dot(graph, label));
}
