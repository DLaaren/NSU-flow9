import lingo/pegcode/driver;
import string;
import math/math;
import maybe;

import infix;

export {
    RPNExpression ::= Const, OpName;
    OpName(name : string);

    PostfixToString(RPNexpr: [RPNExpression]) -> string;
    RPNcalculate(RPNexpr: [RPNExpression]) -> Maybe<double>;

    translateToInfix(RPNexpr : [RPNExpression]) -> Maybe<Expression>;
    translateToPostfix(expr : Expression) -> Maybe<[RPNExpression]>;
}

PostfixToString(RPNexpr: [RPNExpression]) -> string {
    fold(RPNexpr, "", \str, val -> {
        switch(val) {
            Const(c) : str + d2s(c) + " ";
            OpName(name) : str + name + " ";
        }
    });


}

RPNcalculate(RPNexpr: [RPNExpression]) -> Maybe<double> {
    // map : ([?], (?) -> ??) -> [??];
    // fold : (xs : [?], init : ??, fn : (??, ?)->??) -> ??
    // arrayPush : ([?], ?) -> [?];
    // removeIndex(a : [?], index : int) -> [?];
    // lastElement(a: [?], def: ?) -> ?;
    // lastElement(map(stack, \elem -> Some(elem)), None());

    stack : [Maybe<double>] = [];

    result = fold(RPNexpr, stack, \st, e -> {
        switch(e) {
            Const(c) : arrayPush(st, Some(c));
            OpName(name) : {
                left = lastElement(st, None());
                a = removeIndex(st, length(st) - 1);

                right = lastElement(a, None());
                b = removeIndex(a, length(a) - 1);

                switch(left) {
                    Some(l) : switch(right) {
                        Some(r) : {
                            if (name == "+") {
                                arrayPush(b, Some(l + r));
                            }
                            else if (name == "*") {
                                arrayPush(b, Some(l * r));
                            } else {
                                arrayPush(b, None());
                            }
                        };
                        None() : arrayPush(b, None());
                    }
                    None() : arrayPush(b, None());
                }
            }
        }
    });

    if (length(result) > 1) { 
        None();
    }
    else {
        result[0];
    } 
}

translateToInfix(RPNexpr : [RPNExpression]) -> Maybe<Expression> {
    stack : [Maybe<Expression>] = [];
    result = fold(RPNexpr, stack, \st, e -> {
        switch(e) {
            Const(c) : arrayPush(st, Some(Const(c)));
            OpName(name) : {
                left = lastElement(st, None());
                a = removeIndex(st, length(st) - 1);

                right = lastElement(a, None());
                b = removeIndex(a, length(a) - 1);

                switch(left) {
                    Some(l) : switch(right) {
                        Some(r) : {
                            if (name == "+") {
                                arrayPush(b, Some(Add(l, r)));
                            }
                            else if (name == "*") {
                                arrayPush(b, Some(Mult(l, r)));
                            } else {
                                arrayPush(b, None());
                            }
                        };
                        None() : arrayPush(b, None());
                    }
                    None() : arrayPush(b, None());
                }
            }
        }
    });
    if (length(result) > 1) { 
        None();
    }
    else {
        result[0];
    } 
}

translate(expr : Expression, stack : [Maybe<RPNExpression>]) -> [Maybe<RPNExpression>] {
    switch(expr) {
        Const(c) : arrayPush(stack, Some(Const(c)));
        Add(l,r) : {
            a = translate(l, stack);
            b = translate(r, a);
            arrayPush(b, Some(OpName("+")));
        }
        Mult(l,r) : {
            a = translate(l, stack);
            b = translate(r, a);
            arrayPush(b, Some(OpName("*")));
        }
        default : arrayPush(stack, None());
    } 
}

translateToPostfix(expr : Expression) -> Maybe<[RPNExpression]> {
    RPNexpr : [Maybe<RPNExpression>] = [];
    result = translate(expr, RPNexpr);

    // Determine if all elements of the array satisfy the predicate. O(n)
	// forall : (a : [?], fn : (?) -> bool) -> bool;
    // map : ([?], (?) -> ??) -> [??];
    // Does this array contain the given element?  O(n)
	//contains : (a : [?], v : ?) -> bool;
    // either    : (m : Maybe<?>, alternative: ?) -> ?;

    if (contains(result, None())) {
        None();
    } else {
        Some(map(result, \r -> either(r, Const(0.0)))); // кринж
    }
}
