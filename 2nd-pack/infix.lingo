
// add has the lowest priority -- > so parse it at first
// so expression is 1) ( expression with higher priority ) + ( another addition )
//                  2) ( expression )
// in 1) we check another type of expression (not add) to prevent left recursion
// in 2) we can have not that operation but the operation with higher priority as left operand
// so the same for other operations

add     = ws sub:l ws "+" ws add:r ws               { BinOp("+",:l,:r) } | sub;
sub     = ws mult:l ws rsub+:r ws                   { buildOp("-",:l,:r) } | div;
rsub    = ws "-" ws mult:val ws                     { :val };
div     = ws mult:l ws rdiv+:r                      { buildOp("/",:l,:r) } | mult;
rdiv    = ws "/" ws mult:val ws { :val };
mult    = ws diff:l ws rmult+:r                     { buildOp("*",:l,:r) } | diff;
rmult   = ws "*" ws diff:val ws                     { :val };
diff    = ws "d/d" var:x ws "(" ws add:e ws ")" ws  { Diff(:e,:x) } | neg;
neg     = ws "-" ws "(" ws add:e ws ")" ws          { Neg(:e) } | 
          ws "-" ws (rational|var):e ws             { Neg(:e) } | atom;


var     = (letter+) $v                               { Var($v) };
const   = (digit+);
rational = const $l "/" const $r                    { Rational(s2i($l), s2i($r)) } |
           const $l                                 { Rational(s2i($l), 1) };
atom    = ws rational:r ws                          { :r } | 
          ws var:v ws                               { :v } | 
          ws "(" ws expr:e ws ")" ws                { :e };      
expr    = ws add:e ws                               { :e } | 
          ws "(" ws expr:e ws ")" ws                { :e };

// character range
letter = 'a'-'z' | 'A'-'Z' | '_';

// digit range 
digit = '0'-'9';

// zero, one or more spaces are allowed              
ws = (' '|'\r'|'\n'|'\t')*;