
// add has the lowest priority -- > so parse it at first
// so expression is 1) ( expression with higher priority ) + ( another addition )
//                  2) ( expression )
// in 1) we check another type of expression (not add) to prevent left recursion
// in 2) we can have not that operation but the operation with higher priority as left operand
// so the same for other operations

add     = ws sub:l ws "+" ws add:r ws               { BinOp("+",:l,:r) } | sub;
sub     = ws mult:l ws "-" ws sub:r ws              { BinOp("-",:l,:r) } | mult;
mult    = ws div:l ws "*" ws mult:r ws              { BinOp("*",:l,:r) } | div;
div     = ws neg:l ws "/" ws div:r ws               { BinOp("/",:l,:r) } | neg;
neg     = ws "-" ws add:e ws                        { Neg(:e) } | atom;

var     = (letter (letter | digit)*) $v             { Var($v) };
const   = ("-"? ((digit+ "." digit+) | digit+)) $d  { Const(s2d($d)) };
atom    = ws const:c ws                             { :c } | 
          ws var:v ws                               { :v } | 
          ws "(" ws expr:e ws ")" ws                { :e };      
expr    = ws add:e ws                               { :e } | 
          ws "(" ws expr:e ws ")" ws                { :e };

// character range
letter = 'a'-'z' | 'A'-'Z' | '_';

// digit range 
digit = '0'-'9';

// zero, one or more spaces are allowed              
ws = (' '|'\r'|'\n'|'\t')*;