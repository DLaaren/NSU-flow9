import lingo/pegcode/driver;
import string;
import math/math;

import infix;

main() {
    // get an expression
    expr = getUrlParameter("expr");

    // get tree with constants
    VarsTree : Tree<string, Rational> = inputVariablesIntoTree();

    usage : string = "Usage: infix_calculator.flow -- \"expr=<expression>\" \"vars=<variables>\" \"<variable1>=<value1>\" ...";
	
    if (expr == "") {
		println("Expressinon expected");
		println(usage);
		quit(-1);
	} else {
        e = parse(expr);
		println(e);

        result : Pair<string, Maybe<Rational>> = calculateWrapper(e, VarsTree);
        println("simplified expression :: " + firstOfPair(result));

        switch(secondOfPair(result)) {
            Some(res) : println(firstOfPair(result) + " = " + InfixToString(res));
            None() : println("error while calculating");
        }

		quit(0);
    }
}