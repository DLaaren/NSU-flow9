import lingo/pegcode/driver;
import string;
import math/math;

import infix;

lingoGrammar() {
    compilePegGrammar("#include infix.lingo");
}

//	makeTree : () -> Tree<?, ??>; // empty tree
//	setTree : (tree : Tree<?, ??>, key : ?, value : ??) -> Tree<?, ??>;
//  lookupTree : (tree : Tree<?, ??>, key : ?) -> Maybe<??>;

inputVariablesIntoTree() -> Tree<string, Rational> {
    variables = strSplit(getUrlParameter("vars"), ",");
    fold(variables, makeTree(),\ tree, variable -> {
        tmp = strSplit(getUrlParameter(variable), "/");
        setTree(tree, variable, Rational(Pair(s2i(tmp[0]), s2i(tmp[1]))));
    });
}

main() {
    // get an expression
    expr = getUrlParameter("expr");

    // get tree with constants
    // VarsTree : Tree<string, Rational> = inputVariablesIntoTree();

    usage : string = "Usage: infix_calculator.flow -- \"expr=<expression>\" \"vars=<variables>\" \"<variable1>=<value1>\" ...";
	
    if (expr == "") {
		println("Expressinon expected");
		println(usage);
		quit(-1);
	} else {
        e = parsic(lingoGrammar(), expr, defaultPegActions);
		println(e);
        println(InfixToString(e));
        //switch(calculate(e, VarsTree)) {
        //    Some(result) : println(InfixToString(e) + " = " + i2s(result));
        //    None() : println("error while calculating");
        //}
        
		quit(0);
    }
}